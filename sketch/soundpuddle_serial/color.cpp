#include "color.h"

// HSL color function that is was used for soundpuddle 2012-2013. Outputs whiter and more pastel colors, due to HSL space.
void hsl2rgb(float H, float S, float L, float& Rval, float& Gval, float& Bval) {
  if (H < 0) {H = 0;}
  else if (H > 1) {
    while (H>1) {H = H - 1;}
  }
  if (S < 0) {S = 0;}
  else if (S > 1) {S = 1;}
  float var_1;
  float var_2;
  float Hu=H+.33;
  float Hd=H-.33;
  if ( S == 0 )   //HSL from 0 to 1
  {
    Rval = L * 127; //RGB results from 0 to 255
    Gval = L * 127;
    Bval = L * 127;
  }
  else
  {
    if ( L < 0.5 ) 
      var_2 = L * ( 1 + S );
    else
      var_2 = ( L + S ) - ( S * L );
    var_1 = 2 * L - var_2;
    Rval = round(127 * Hue_2_RGB( var_1, var_2, Hu ));
    Gval = round(127 * Hue_2_RGB( var_1, var_2, H ));
    Bval = round(127 * Hue_2_RGB( var_1, var_2, Hd ));
  }
}

//This function is tested good at Hackerspace, 2014-08-10. Modified from Lumenexus code.
void hsv2rgb(float h, float s, float v, uint8_t& Rvalue, uint8_t& Gvalue, uint8_t& Bvalue) {
  float red;
  float green;
  float blue;
  while (h > 1.0) {h = h - 1.0;}
  while (h < 0.0) {h = h + 1.0;}
  while (v > 1.0) {v = v - 1.0;}
  while (v < 0.0) {v = v + 1.0;}
  if (s > 0.0) {
    h *= 6.0;      // sector 0 to 5
    uint32_t sextant = floorf(h);;
    float fract = h - sextant;      // fractional part of h
    float p = v * ( 1 - s );
    float q = v * ( 1 - s * fract );
    float t = v * ( 1 - s * ( 1 - fract ) );
    switch(sextant) {
      case 0:
        red = v;
        green = t;
        blue = p;
        break;
      case 1:
        red = q;
        green = v;
        blue = p;
        break;
      case 2:
        red = p;
        green = v;
        blue = t;
        break;
      case 3:
        red = p;
        green = q;
        blue = v;
        break;
      case 4:
        red = t;
        green = p;
        blue = v;
        break;
      default:    // case 5:
        red = v;
        green = p;
        blue = q;
        break;
    }
  }
  // The LPD8806 only has 7-bit PWM, so the R,G,B channel maximums are 127
  Rvalue = (uint8_t)(red*255.0);
  Gvalue = (uint8_t)(green*255.0);
  Bvalue = (uint8_t)(blue*255.0);
}



// This function takes r,g,b values (ranging 0-255) and assembles a 24bit (LPD8806) or 32bit (APA102) packet. Right now it only handles the APA102.
unsigned long assemble_apa102_ledframe(uint8_t r_val, uint8_t g_val, uint8_t b_val, uint8_t global) {
//     return ((0xFF | global) << 24) | (b_val << 16) | (g_val << 8) | r_val ; // this line actually uses the global input
    return (0xff000000) | (b_val << 16) | (g_val << 8) | r_val ; // this line forces global == 0xFF, which shaves ~1mS off the loop time for the full-size soundpuddle
    // TODO: make this an ifdef, or otherwise improve this implementation
}

// This function takes r,g,b values (ranging 0-255) and assembles a 24bit (LPD8806) or 32bit (APA102) packet. Right now it only handles the APA102.
unsigned long assemble_lpd8806_ledframe(uint8_t r_val, uint8_t g_val, uint8_t b_val) {
    return (0x808080 | (b_val << 16) | (r_val << 8) | g_val) << 8 ;
}

unsigned long hsv_table[255] = {
4278190080,
4278190080,
4278190080,
4278190081,
4278190081,
4278190082,
4278190082,
4278190082,
4278190083,
4278190083,
4278190084,
4278190340,
4278190340,
4278190341,
4278190341,
4278190342,
4278190598,
4278190598,
4278190599,
4278190599,
4278190856,
4278190856,
4278190856,
4278191113,
4278191113,
4278191370,
4278191370,
4278191370,
4278191627,
4278191627,
4278191884,
4278191884,
4278192140,
4278192141,
4278192397,
4278192398,
4278192654,
4278192910,
4278192911,
4278193167,
4278193168,
4278193424,
4278193680,
4278193681,
4278193937,
4278194194,
4278194194,
4278194450,
4278194707,
4278194963,
4278195219,
4278195219,
4278195219,
4278195475,
4278195475,
4278195731,
4278195731,
4278195731,
4278195987,
4278195987,
4278196243,
4278196243,
4278196242,
4278196498,
4278196498,
4278196754,
4278196753,
4278196753,
4278197009,
4278197009,
4278197264,
4278197264,
4278197264,
4278197519,
4278197519,
4278197775,
4278197774,
4278197774,
4278198029,
4278198029,
4278198284,
4278198284,
4278198283,
4278198539,
4278198538,
4278198794,
4278198793,
4278198793,
4278199048,
4278199048,
4278199303,
4278199302,
4278199302,
4278199557,
4278199556,
4278199812,
4278199811,
4278199810,
4278200065,
4278200065,
4278200320,
4278265856,
4278331392,
4278331648,
4278397184,
4278462976,
4278528512,
4278594048,
4278659840,
4278725376,
4278791168,
4278856704,
4278922240,
4278988032,
4279053568,
4279119360,
4279184896,
4279250432,
4279316224,
4279381760,
4279447552,
4279513088,
4279578624,
4279709952,
4279775488,
4279841280,
4279906816,
4279972352,
4280103680,
4280169216,
4280235008,
4280300544,
4280431616,
4280497408,
4280562944,
4280694272,
4280759808,
4280825344,
4280956672,
4281022208,
4281153536,
4281219072,
4281284608,
4281415936,
4281481472,
4281612800,
4281678336,
4281809408,
4281940736,
4282006272,
4282137344,
4282137088,
4282137088,
4282202368,
4282202112,
4282267392,
4282267136,
4282266880,
4282332160,
4282332160,
4282397440,
4282397184,
4282396928,
4282462208,
4282461952,
4282527232,
4282526976,
4282526720,
4282591744,
4282591488,
4282656768,
4282656512,
4282656256,
4282721536,
4282721280,
4282786560,
4282786048,
4282785792,
4282851072,
4282850816,
4282915840,
4282915584,
4282915328,
4282980608,
4282980096,
4283045376,
4283045120,
4283044608,
4283109888,
4283109376,
4283174656,
4283174400,
4283173888,
4283239168,
4283238656,
4283303936,
4283303424,
4283303168,
4283368192,
4283367936,
4283432961,
4283432962,
4283432964,
4283498502,
4283498503,
4283564041,
4283564043,
4283564044,
4283629582,
4283629584,
4283695121,
4283695123,
4283695125,
4283760663,
4283760665,
4283826202,
4283826204,
4283826206,
4283891744,
4283891746,
4283957284,
4283957286,
4283957288,
4284022825,
4284022827,
4284088365,
4284088367,
4284088369,
4284153907,
4284153909,
4284219448,
4284219450,
4284219452,
4284284990,
4284284992,
4284350530,
4284350532,
4284350534,
4284416073,
4284416075,
4284481613,
4284481615,
4284481618,
4284547156,
4284547158,
4284612696,
4284612699,
4284612701,
4284678239,
4284678242,
4284678244,
4284547428,
4284481892,
4284350821,
4284219749
};